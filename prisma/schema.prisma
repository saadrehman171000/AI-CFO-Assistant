generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String                @id @default(cuid())
  clerkId             String                @unique
  email               String                @unique
  firstName           String?
  lastName            String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  stripeCustomerId    String?
  
  // Company relationship
  companyId           String?
  company             Company?              @relation(fields: [companyId], references: [id])
  isCompanyAdmin      Boolean               @default(false)
  hasCompletedSetup   Boolean               @default(false)
  
  financialReports    FinancialReport[]
  parsedData          ParsedFinancialData[]
  subscriptions       Subscription[]
  financialAnalyses   FinancialAnalysis[]

  @@map("users")
}

model Company {
  id                  String                @id @default(cuid())
  name                String
  description         String?
  industry            String?
  website             String?
  phone               String?
  address             String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  
  // Relationships
  users               User[]
  branches            Branch[]
  financialReports    FinancialReport[]
  financialAnalyses   FinancialAnalysis[]

  @@map("companies")
}

model Branch {
  id                  String                @id @default(cuid())
  name                String
  location            String?
  address             String?
  phone               String?
  description         String?
  isActive            Boolean               @default(true)
  companyId           String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  
  // Relationships
  company             Company               @relation(fields: [companyId], references: [id], onDelete: Cascade)
  financialReports    FinancialReport[]
  financialAnalyses   FinancialAnalysis[]

  @@map("branches")
}

model FinancialReport {
  id           String                @id @default(cuid())
  userId       String
  fileName     String
  fileType     String
  reportType   ReportType
  year         Int
  month        Int
  fileSize     Int
  uploadDate   DateTime              @default(now())
  status       UploadStatus          @default(PROCESSING)
  errorMessage String?
  
  // Company and Branch relationships
  companyId    String?
  branchId     String?
  
  user         User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  company      Company?              @relation(fields: [companyId], references: [id])
  branch       Branch?               @relation(fields: [branchId], references: [id])
  parsedData   ParsedFinancialData[]

  @@map("financial_reports")
}

model ParsedFinancialData {
  id              String          @id @default(cuid())
  reportId        String
  userId          String
  accountName     String
  accountCategory String?
  amount          Decimal         @db.Decimal(15, 2)
  dataType        DataType
  period          String?
  notes           String?
  createdAt       DateTime        @default(now())
  report          FinancialReport @relation(fields: [reportId], references: [id], onDelete: Cascade)
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("parsed_financial_data")
}

model Subscription {
  id                   String             @id @default(cuid())
  userId               String
  stripeCustomerId     String?
  stripeSubscriptionId String?            @unique
  stripePriceId        String?
  status               SubscriptionStatus
  currentPeriodStart   DateTime?
  currentPeriodEnd     DateTime?
  cancelAtPeriodEnd    Boolean            @default(false)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  user                 User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

enum ReportType {
  PROFIT_LOSS
  BALANCE_SHEET
  CASH_FLOW
  AR_AGING
  AP_AGING
  TRIAL_BALANCE
}

enum UploadStatus {
  PROCESSING
  COMPLETED
  FAILED
}

enum DataType {
  REVENUE
  EXPENSE
  ASSET
  LIABILITY
  EQUITY
  CASH_FLOW_IN
  CASH_FLOW_OUT
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  INCOMPLETE
  INCOMPLETE_EXPIRED
  PAST_DUE
  TRIALING
  UNPAID
}

model FinancialAnalysis {
  id                     String    @id @default(cuid())
  userId                 String
  user                   User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  fileName               String
  fileType               String
  fileSizeMb             Float
  uploadDate             DateTime  @default(now())
  analysisData           Json      // Store the complete analysis JSON response
  isMultiFileAnalysis    Boolean   @default(false)
  multiFileAnalysisGroupId String?
  
  // Company and Branch relationships
  companyId              String?
  branchId               String?
  company                Company?  @relation(fields: [companyId], references: [id])
  branch                 Branch?   @relation(fields: [branchId], references: [id])
  
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt

  @@map("financial_analyses")
}